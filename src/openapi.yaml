openapi: '3.0.2'
info:
  title: Comicbook Catalog API
  version: '1.0'
  description: A simple Comicbook API to manage your valuable collection!
  contact:
    name: Eddie Hernandez
    email: eddie.hernandez.us@gmail.com
security:
  - BearerAuth: []

servers:
  - url: /
    description: Heroku or Local Testing
tags:
  - name: Users
  - name: Comics

paths:
  /users/register:
    post:
      description: Register a new User.
      tags:
      - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: joe@me.com
                password:
                  type: string
                  example: test123              
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: joe@me.com
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '409':
          $ref: '#/components/responses/409ConflictError'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /users/login:
    post:
      description: Log in an existing User.  Upon successful login, returns user and bearer token.
      tags:
      - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: joe@me.com
                password:
                  type: string
                  example: test123
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: User and Bearer Token
                properties:
                  message:
                    type: string
                    example: Authentication successful
                  token:
                    type: string
                    example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: john@me.com
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/500InternalServerError'


  /comics:
    get:
      description: Get all Comicbooks.
      tags: 
      - Comics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Search results
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comic'
                  count:
                    type: number
                    example: 1
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    post:
      description: Create a new Comic
      tags: 
      - Comics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Comic'        
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Comic'
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /comics/{id}:
    get:
      description: Get a specific Comicbook by its id.
      tags: 
      - Comics
      parameters:
        - in: path
          name: id
          required: true
          description: The Comicbook id assigned by API when created.
          schema:
            type: string
            example: xxx-xxx-xxx-xxx
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Comic'
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    delete:
      description: Delete a specific Comicbook by id.
      tags:
      - Comics
      parameters:
        - in: path
          name: id
          required: true
          description: The Comicbook id assigned by API when created.
          schema:
            type: string
            example: xxx-xxx-xxx-xxx
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    put:
      description: Update/replace a specific Comicbook by its id.
      tags: 
      - Comics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Comic'
      parameters:
        - in: path
          name: id
          required: true
          description: The Comicbook id assigned by API when created.
          schema:
            type: string
            example: xxx-xxx-xxx-xxx
        
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Comic'
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/500InternalServerError'
   
components:
  # Security schemes
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  # Reusable schemas (data models)
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          example: 12345
        message:
          type: string
          example: Error message goes here
    Comic:
      type: object
      description: Comicbook model
      properties:
        id:
          type: string
          description: not required for POST
          example: xxx-xxx-xxx-xxx
        issueNumber:
          type: string
          example: 100
        title:
          type: string
          example: The Amazing Spiderman
        writer:
          type: string
          example: Stan Lee
        illustrator: 
          type: string
          example: Todd McFarlane
        publisher:
          type: string
          example: Marvel

  #Reusable responses
  responses:
    400BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Error'  
    401UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Error' 
    404NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Error' 
    409ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Error' 
    500InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Error'